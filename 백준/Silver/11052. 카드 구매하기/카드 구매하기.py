'''
민규는 카드를 사려고 한다
카드는 총 8개의 등급이 있다.
카드는 카드팩의 형태로만 구매할 수 있고, 카드팩은 1장 카드팩, 2장 카드팩 ... N장 카드팩 총 N가지가 존재한다.
민규는 카드의 개수가 적은 팩이라더라도, 가격이 비싸면 높은 등급의 카드가 들어있을 것이라는 미신을 믿고있다.
그래서 최대한 돈을 많이 지불해서 카드 N개를 구매하려고 한다.

각 카드팩의 가격이 주어지고, 민규가 사려는 카드개수가 주어진다.
해당 카드개수를 사기위해 소모되는 최대값을 구하여라!
'''
'''
단순하게 생각하면 그리디 같다
장당 비율이 가장 높은 애를 골라서 해당 카드팩을 될때 까지 가장많이 사면 어떨까?
그다음 남은 카드수는 다음 비율이 높은애로 사는거지... 근데 이게 무조건 최고라고는 말을 못하겠는데 흠...

DP로 가자 각 목표장마다 살 수 있는 최대 개수를 구하는거다
될라나 흠..?
'''
# N = 목표하는 카드의 개수
N = int(input())

# 카드 팩의 가격들을 적은 카드팩 호출
card_packs = [0] + list(map(int, input().split()))

dp = [0] * (N+1)
dp[1] = card_packs[1]

for i in range(2, N+1):
    tmp_dp = 0
    for j in range(1, N//2 + 1):
        tmp = dp[j] + dp[i-j]
        if tmp_dp < tmp:
            tmp_dp = tmp

    dp[i] = max(tmp_dp, card_packs[i])

print(dp[N])
